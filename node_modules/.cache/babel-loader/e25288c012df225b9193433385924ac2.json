{"ast":null,"code":"import { ADD_TODO, DELETE_TODO, ERRORS, UPDATE_TODO, GET_TODOS, GET_TODO, SET_LOADING, CLEAR_ERRORS } from \"../actions/types\";\nconst initialState = {\n  todos: null,\n  current: null,\n  loading: false,\n  error: null\n}; //if there is a todos object in localstorage\n//use data in it and fill todos\n\n/* if (localStorage.getItem(\"todos\")) {\n  initialState.todos = initialState.todos?.concat(\n      JSON.parse(localStorage.getItem(\"todos\"))\n  );\n} */\n//if there is a todoList object in localstorage\n//use data in it and fill todoList list\n\nif (localStorage.getItem(\"todoList\")) {\n  var _initialState$todoLis;\n\n  initialState.todoList = (_initialState$todoLis = initialState.todoList) === null || _initialState$todoLis === void 0 ? void 0 : _initialState$todoLis.concat(JSON.parse(localStorage.getItem(\"todoList\")));\n} //actions\n//set localstorage\n\n\nconst setLocalstorage = () => {\n  if (localStorage.getItem(\"todos\")) {\n    var _initialState$todos;\n\n    initialState.todos = (_initialState$todos = initialState.todos) === null || _initialState$todos === void 0 ? void 0 : _initialState$todos.concat(JSON.parse(localStorage.getItem(\"todos\")));\n  }\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return { ...state,\n        todos: action.payload,\n        loading: false\n      };\n\n    case ADD_TODO:\n      return { ...state,\n        todos: [...state.todos, action.payload.data],\n        loading: false\n      };\n\n    case GET_TODO:\n      return { ...state,\n        current: action.payload\n      };\n\n    case ERRORS:\n      return { ...state,\n        error: action.payload\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case CLEAR_ERRORS:\n      return { ...state,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/generous/projects/todo/src/reducers/TodoItemsReducer.js"],"names":["ADD_TODO","DELETE_TODO","ERRORS","UPDATE_TODO","GET_TODOS","GET_TODO","SET_LOADING","CLEAR_ERRORS","initialState","todos","current","loading","error","localStorage","getItem","todoList","concat","JSON","parse","setLocalstorage","state","action","type","payload","data"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,YARF,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB,C,CAOA;AACI;;AACA;AACJ;AACA;AACA;AACA;AAEE;AACA;;AACA,IAAIC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAJ,EAAsC;AAAA;;AAClCN,EAAAA,YAAY,CAACO,QAAb,4BAAwBP,YAAY,CAACO,QAArC,0DAAwB,sBAAuBC,MAAvB,CACpBC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADoB,CAAxB;AAGH,C,CAED;AACA;;;AACA,MAAMK,eAAe,GAAG,MAAM;AAC1B,MAAIN,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AAAA;;AAC/BN,IAAAA,YAAY,CAACC,KAAb,0BAAqBD,YAAY,CAACC,KAAlC,wDAAqB,oBAAoBO,MAApB,CACjBC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CADiB,CAArB;AAGH;AACJ,CAND;;AAaF,gBAAe,CAACM,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,SAAL;AACE,aAAM,EACJ,GAAGgB,KADC;AAEJX,QAAAA,KAAK,EAAEY,MAAM,CAACE,OAFV;AAGJZ,QAAAA,OAAO,EAAE;AAHL,OAAN;;AAKF,SAAKX,QAAL;AACE,aAAM,EACJ,GAAGoB,KADC;AAEJX,QAAAA,KAAK,EAAE,CAAC,GAAGW,KAAK,CAACX,KAAV,EAAiBY,MAAM,CAACE,OAAP,CAAeC,IAAhC,CAFH;AAGJb,QAAAA,OAAO,EAAE;AAHL,OAAN;;AAMF,SAAKN,QAAL;AACE,aAAM,EACJ,GAAGe,KADC;AAEJV,QAAAA,OAAO,EAAEW,MAAM,CAACE;AAFZ,OAAN;;AAKF,SAAKrB,MAAL;AACE,aAAM,EACJ,GAAGkB,KADC;AAEJR,QAAAA,KAAK,EAACS,MAAM,CAACE;AAFT,OAAN;;AAIF,SAAKjB,WAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELT,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKJ,YAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELR,QAAAA,KAAK,EAAE;AAFF,OAAP;;AAKF;AACE,aAAOQ,KAAP;AArCJ;AAuCD,CAxCD","sourcesContent":["import {\n  ADD_TODO,\n  DELETE_TODO,\n  ERRORS,\n  UPDATE_TODO,\n  GET_TODOS,\n  GET_TODO,\n  SET_LOADING,\n  CLEAR_ERRORS,\n} from \"../actions/types\";\n\nconst initialState = {\n  todos: null,\n  current: null,\n  loading: false,\n  error: null,\n};\n\n//if there is a todos object in localstorage\n    //use data in it and fill todos\n    /* if (localStorage.getItem(\"todos\")) {\n      initialState.todos = initialState.todos?.concat(\n          JSON.parse(localStorage.getItem(\"todos\"))\n      );\n  } */\n\n  //if there is a todoList object in localstorage\n  //use data in it and fill todoList list\n  if (localStorage.getItem(\"todoList\")) {\n      initialState.todoList = initialState.todoList?.concat(\n          JSON.parse(localStorage.getItem(\"todoList\"))\n      );\n  }\n\n  //actions\n  //set localstorage\n  const setLocalstorage = () => {\n      if (localStorage.getItem(\"todos\")) {\n          initialState.todos = initialState.todos?.concat(\n              JSON.parse(localStorage.getItem(\"todos\"))\n          );\n      }\n  };\n\n\n\n\n\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return{\n        ...state,\n        todos: action.payload,\n        loading: false\n      }\n    case ADD_TODO:\n      return{\n        ...state,\n        todos: [...state.todos, action.payload.data],\n        loading: false\n      }\n\n    case GET_TODO:\n      return{\n        ...state,\n        current: action.payload\n      }\n\n    case ERRORS:\n      return{\n        ...state,\n        error:action.payload\n      }\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case CLEAR_ERRORS:\n      return {\n        ...state,\n        error: null,\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}