{"ast":null,"code":"import { ADD_TODO, DELETE_TODO, ERRORS, UPDATE_TODO, GET_TODOS, GET_TODO, SET_LOADING, CLEAR_ERRORS } from \"./types\"; //actions\n//add todo item to server\n\nexport const addTodo = data => async dispatch => {\n  console.log(data);\n  dispatch({\n    type: ADD_TODO,\n    payload: data\n  });\n}; //get todos from server\n\nexport const getTodos = () => async dispatch => {\n  /*  try {\n        fetch('https://jsonplaceholder.typicode.com/todos')\n  .then((response) => response.json())\n  .then((json) => dispatch({\n        type: GET_TODOS,\n        payload: json}));\n        \n    } catch (error) {\n        dispatch({\n            type: ERRORS,\n            payload: error.response\n        })\n    } */\n  //if there is a todos object in localstorage\n  //use data in it and fill todos\n  if (localStorage.getItem(\"todos\")) {\n    dispatch({\n      type: GET_TODOS,\n      payload: JSON.parse(localStorage.getItem(\"todos\"))\n    });\n  } else {\n    dispatch({\n      type: ERRORS,\n      payload: 'NO DATA AVAILABLE'\n    });\n  }\n}; //delete todo from server\n//update a todo item\n//clear todo errors\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n}; //set loading\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/home/generous/projects/todo/src/actions/TodoActions.js"],"names":["ADD_TODO","DELETE_TODO","ERRORS","UPDATE_TODO","GET_TODOS","GET_TODO","SET_LOADING","CLEAR_ERRORS","addTodo","data","dispatch","console","log","type","payload","getTodos","localStorage","getItem","JSON","parse","clearErrors","setLoading"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,YARF,QASO,SATP,C,CAWA;AAEA;;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACnDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAC,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEb,QADC;AAEPc,IAAAA,OAAO,EAAEL;AAFF,GAAD,CAAR;AAID,CANM,C,CAQP;;AACA,OAAO,MAAMM,QAAQ,GAAG,MAAM,MAAOL,QAAP,IAAoB;AAChD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA,MAAIM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjCP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,SADC;AAEPU,MAAAA,OAAO,EAAEI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX;AAFF,KAAD,CAAR;AAID,GALD,MAKO;AACLP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,MADC;AAEPY,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID;AACF,CA3BM,C,CA6BP;AAEA;AAEA;;AACA,OAAO,MAAMM,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLP,IAAAA,IAAI,EAAEN;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMc,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLR,IAAAA,IAAI,EAAEP;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\n  ADD_TODO,\n  DELETE_TODO,\n  ERRORS,\n  UPDATE_TODO,\n  GET_TODOS,\n  GET_TODO,\n  SET_LOADING,\n  CLEAR_ERRORS,\n} from \"./types\";\n\n//actions\n\n//add todo item to server\nexport const addTodo = (data) => async (dispatch) => {\n  console.log(data);\n  dispatch({\n    type: ADD_TODO,\n    payload: data,\n  });\n};\n\n//get todos from server\nexport const getTodos = () => async (dispatch) => {\n  /*  try {\n        fetch('https://jsonplaceholder.typicode.com/todos')\n  .then((response) => response.json())\n  .then((json) => dispatch({\n        type: GET_TODOS,\n        payload: json}));\n        \n    } catch (error) {\n        dispatch({\n            type: ERRORS,\n            payload: error.response\n        })\n    } */\n  //if there is a todos object in localstorage\n  //use data in it and fill todos\n  if (localStorage.getItem(\"todos\")) {\n    dispatch({\n      type: GET_TODOS,\n      payload: JSON.parse(localStorage.getItem(\"todos\")),\n    });\n  } else {\n    dispatch({\n      type: ERRORS,\n      payload: 'NO DATA AVAILABLE'\n    });\n  }\n};\n\n//delete todo from server\n\n//update a todo item\n\n//clear todo errors\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS,\n  };\n};\n\n//set loading\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}