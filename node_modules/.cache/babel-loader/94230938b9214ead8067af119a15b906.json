{"ast":null,"code":"import { ADD_TODO, DELETE_TODO, ERRORS, UPDATE_TODO, GET_TODOS, GET_TODO, SET_LOADING, CLEAR_ERRORS, CLEAR_CURRENT } from \"./types\"; //actions\n//add todo item to server\n\nexport const addTodo = item => async dispatch => {\n  try {\n    /* const res = await fetch(`${process.env.REACT_APP_API_URL}/additem`,{ */\n    const res = await fetch(`http://localhost:8000/api/todo/additem`, {\n      method: \"POST\",\n      body: JSON.stringify(item),\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n    const data = await res.json();\n    console.log(res);\n    dispatch({\n      type: ADD_TODO,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ERRORS,\n      payload: \"Something went wrong\"\n    });\n  }\n}; //get todos from server\n\nexport const getTodos = (id = 1) => async dispatch => {\n  try {\n    const res = await fetch(`${process.env.REACT_APP_API_URL}/todos/${id}`);\n    const data = await res.json();\n    dispatch({\n      type: GET_TODOS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ERRORS,\n      payload: \"Something went wrong\"\n    });\n  }\n}; //delete todo from locastorage\n\nexport const deleteTodo = id => dispatch => {}; //update a todo item\n\nexport const updateTodo = (id, data) => async dispatch => {}; //set the current\n\nexport const setCurrent = data => dispatch => {\n  dispatch({\n    type: GET_TODO,\n    payload: data\n  });\n}; //clear todo errors\n\nexport const clearErrors = () => {\n  console.log('loading');\n  return {\n    type: CLEAR_ERRORS\n  };\n}; //clear current\n\nexport const clearCurrent = () => {\n  console.log('loading');\n  return {\n    type: CLEAR_CURRENT\n  };\n}; //set loading\n\nexport const setLoading = () => {\n  console.log('loadingS');\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/home/generous/projects/todo/src/actions/TodoActions.js"],"names":["ADD_TODO","DELETE_TODO","ERRORS","UPDATE_TODO","GET_TODOS","GET_TODO","SET_LOADING","CLEAR_ERRORS","CLEAR_CURRENT","addTodo","item","dispatch","res","fetch","method","body","JSON","stringify","headers","data","json","console","log","type","payload","error","getTodos","id","process","env","REACT_APP_API_URL","deleteTodo","updateTodo","setCurrent","clearErrors","clearCurrent","setLoading"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,YARF,EASEC,aATF,QAUO,SAVP,C,CAYA;AAIA;;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACnD,MAAI;AACF;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,wCAAF,EAA0C;AAC/DC,MAAAA,MAAM,EAAE,MADuD;AAE/DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAFyD;AAG/DQ,MAAAA,OAAO,EAAC;AACN,wBAAiB,kBADX;AAEN,uCAA+B;AAFzB;AAHuD,KAA1C,CAAvB;AAQA,UAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AAEAD,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEvB,QADC;AAEPwB,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;AAKD,GAlBD,CAkBE,OAAOM,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAd,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAErB,MADC;AAEPsB,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID;AACF,CA1BM,C,CA+BP;;AACA,OAAO,MAAME,QAAQ,GAAG,CAACC,EAAE,GAAG,CAAN,KAAY,MAAOhB,QAAP,IAAoB;AACpD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEe,OAAO,CAACC,GAAR,CAAYC,iBAAkB,UAASH,EAAG,EAA9C,CAAvB;AACA,UAAMR,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AACAT,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEnB,SADC;AAEPoB,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdd,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAErB,MADC;AAEPsB,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID;AACJ,CAdM,C,CAkBP;;AACA,OAAO,MAAMO,UAAU,GAAIJ,EAAD,IAAShB,QAAD,IAAa,CAE9C,CAFM,C,CAIP;;AACA,OAAO,MAAMqB,UAAU,GAAG,CAACL,EAAD,EAAKR,IAAL,KAAc,MAAOR,QAAP,IAAoB,CAE3D,CAFM,C,CAMP;;AACA,OAAO,MAAMsB,UAAU,GAAId,IAAD,IAASR,QAAQ,IAAG;AAC5CA,EAAAA,QAAQ,CAAC;AACPY,IAAAA,IAAI,EAAElB,QADC;AAEPmB,IAAAA,OAAO,EAAEL;AAFF,GAAD,CAAR;AAID,CALM,C,CAQP;;AACA,OAAO,MAAMe,WAAW,GAAG,MAAM;AAC7Bb,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACF,SAAO;AACLC,IAAAA,IAAI,EAAEhB;AADD,GAAP;AAGD,CALM,C,CAOP;;AACA,OAAO,MAAM4B,YAAY,GAAG,MAAM;AAC9Bd,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACF,SAAO;AACLC,IAAAA,IAAI,EAAEf;AADD,GAAP;AAGD,CALM,C,CASP;;AACA,OAAO,MAAM4B,UAAU,GAAG,MAAM;AAC5Bf,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACF,SAAO;AACLC,IAAAA,IAAI,EAAEjB;AADD,GAAP;AAGD,CALM","sourcesContent":["import {\n  ADD_TODO,\n  DELETE_TODO,\n  ERRORS,\n  UPDATE_TODO,\n  GET_TODOS,\n  GET_TODO,\n  SET_LOADING,\n  CLEAR_ERRORS,\n  CLEAR_CURRENT,\n} from \"./types\";\n\n//actions\n\n\n\n//add todo item to server\nexport const addTodo = (item) => async (dispatch) => {\n  try {\n    /* const res = await fetch(`${process.env.REACT_APP_API_URL}/additem`,{ */\n    const res = await fetch(`http://localhost:8000/api/todo/additem`,{\n      method: \"POST\",\n      body: JSON.stringify(item),\n      headers:{\n        'Content-Type' : 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n      }\n    })\n    const data = await res.json()\n    console.log(res)\n\n    dispatch({\n      type: ADD_TODO,\n      payload: data\n    })\n\n  } catch (error) {\n    console.log(error)\n    dispatch({\n      type: ERRORS,\n      payload: \"Something went wrong\"\n    })\n  }\n};\n\n\n\n\n//get todos from server\nexport const getTodos = (id = 1) => async (dispatch) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/todos/${id}`)\n      const data = await res.json()\n      dispatch({\n        type: GET_TODOS,\n        payload: data\n      })\n    } catch (error) {\n      dispatch({\n        type: ERRORS,\n        payload: \"Something went wrong\"\n      })\n    }\n};\n\n\n\n//delete todo from locastorage\nexport const deleteTodo = (id) => (dispatch) =>{\n    \n}\n\n//update a todo item\nexport const updateTodo = (id, data) => async (dispatch) => {\n  \n};\n\n\n\n//set the current\nexport const setCurrent = (data) =>dispatch =>{\n  dispatch({\n    type: GET_TODO,\n    payload: data\n  })\n}\n\n\n//clear todo errors\nexport const clearErrors = () => {\n    console.log('loading')\n  return {\n    type: CLEAR_ERRORS,\n  };\n};\n\n//clear current\nexport const clearCurrent = () => {\n    console.log('loading')\n  return {\n    type: CLEAR_CURRENT,\n  };\n};\n\n\n\n//set loading\nexport const setLoading = () => {\n    console.log('loadingS')\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}