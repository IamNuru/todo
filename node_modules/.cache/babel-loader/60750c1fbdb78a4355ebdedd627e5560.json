{"ast":null,"code":"var _jsxFileName = \"/home/generous/projects/todo/src/components/modals/EditTodoItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { clearErrors, current, getTodos, updateTodo } from \"../../actions/TodoActions\";\nimport { getTodolists } from \"../../actions/TodolistActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditTodoList = ({\n  current,\n  errors,\n  todolists,\n  updateTodo,\n  getTodos,\n  clearErrors\n}) => {\n  _s();\n\n  //state\n  const [data, setData] = useState({\n    title: '',\n    deadline: ''\n  });\n  const {\n    title,\n    deadline\n  } = data;\n  useEffect(() => {\n    if (current) {\n      getTodolists();\n      setData({\n        title: current.title,\n        deadline: current.deadline\n      });\n    }\n  }, [current]); //ON INPUT CHANGES\n\n  const onChange = e => {\n    setData({ ...data,\n      [e.target.name]: e.target.value\n    });\n\n    if (errors) {\n      clearErrors();\n    }\n  }; //submit the form\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n    updateTodo(current.id, data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"edit_todo_modal\",\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Edit New Todo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-field col s12\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"title\",\n              value: title ? title : '',\n              onChange: onChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-field col s12\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"deadline\",\n              value: deadline ? deadline : '',\n              onChange: onChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"input-field col s12\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"todolistName\",\n            value: todolistName ? todolistName : '',\n            children: (todolists === null || todolists === void 0 ? void 0 : todolists.length) > 0 ? todolists.map(todolist => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: todolist.id,\n                selected: current.todolist_id,\n                children: todolist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 26\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disable: true,\n              children: \"Go back and create todolists\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"modal-close waves-effect waves-light btn\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons left\",\n            children: \"update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), \"UPDATE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditTodoList, \"7PpAaEyYNCgDfHuVc9WxcfbUSd4=\");\n\n_c = EditTodoList;\n\nconst mapStateToProps = state => ({\n  current: state.todo.current,\n  errors: state.todo.errors,\n  todolists: state.todolist.todolists\n});\n\nexport default connect(mapStateToProps, {\n  updateTodo,\n  getTodos,\n  clearErrors\n})(EditTodoList);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditTodoList\");","map":{"version":3,"sources":["/home/generous/projects/todo/src/components/modals/EditTodoItem.js"],"names":["React","useState","useEffect","connect","clearErrors","current","getTodos","updateTodo","getTodolists","EditTodoList","errors","todolists","data","setData","title","deadline","onChange","e","target","name","value","onSubmit","preventDefault","id","todolistName","length","map","todolist","todolist_id","mapStateToProps","state","todo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {connect } from \"react-redux\"\nimport { clearErrors, current,  getTodos, updateTodo } from \"../../actions/TodoActions\"\nimport { getTodolists } from \"../../actions/TodolistActions\"\n\n\nconst EditTodoList = ({current,errors, todolists, updateTodo, getTodos, clearErrors}) => {\n\n    //state\n    const [data, setData] = useState({\n      title : '',\n      deadline: ''\n    })\n    const { title, deadline } = data;\n\n    useEffect(() => {\n      if (current) {\n        getTodolists()\n        setData({\n          title: current.title,\n          deadline: current.deadline\n        })\n      }\n    }, [current])\n\n\n\n    //ON INPUT CHANGES\n    const onChange = (e) =>{\n        setData({...data, [e.target.name] : e.target.value})\n        if(errors){\n          clearErrors()\n        }\n    }\n\n    //submit the form\n    const onSubmit = (e) =>{\n        e.preventDefault()\n        updateTodo(current.id, data)\n    }\n\n\n  return (\n    <div id=\"edit_todo_modal\" className=\"modal\">\n      <form onSubmit={onSubmit}>\n        <div className=\"modal-content\">\n          <h6>Edit New Todo List</h6>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"text\" name=\"title\" value={title ? title : ''} onChange={onChange} />\n              \n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"date\" name=\"deadline\" value={deadline ? deadline : ''} onChange={onChange} />\n              \n            </div>\n          </div>\n          <div class=\"input-field col s12\">\n            <select name=\"todolistName\" value={todolistName ? todolistName : ''}>\n              {\n                todolists?.length > 0 ? \n                (todolists.map(todolist => {\n                  return <option value={todolist.id} selected={current.todolist_id} >{todolist.name}</option>\n                })) \n                :<option value=\"\" disable>Go back and create todolists</option>\n              }\n              \n            </select>\n          </div>\n        </div>\n        <div className=\"modal-footer\">\n          <button type=\"submit\" className=\"modal-close waves-effect waves-light btn\">\n            <i className=\"material-icons left\">update</i>UPDATE\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\n\nconst mapStateToProps = state => ({\n  current: state.todo.current,\n  errors: state.todo.errors,\n  todolists: state.todolist.todolists,\n})\n\nexport default connect(mapStateToProps, {updateTodo, getTodos, clearErrors})(EditTodoList);\n"]},"metadata":{},"sourceType":"module"}