{"ast":null,"code":"import { ADD_TODO, DELETE_TODO, ERRORS, UPDATE_TODO, GET_TODOS, GET_TODO, SET_LOADING, CLEAR_ERRORS } from \"../actions/types\";\nconst initialState = {\n  todos: null,\n  current: null,\n  loading: false,\n  error: null\n}; //if there is a todos object in localstorage\n//use data in it and fill todos\n\nif (localStorage.getItem(\"todos\")) {\n  initialState.todos = initialState.todos.concat(JSON.parse(localStorage.getItem(\"todos\")));\n} //if there is a todoList object in localstorage\n//use data in it and fill todoList list\n\n\nif (localStorage.getItem(\"todoList\")) {\n  initialState.todoList = initialState.todoList.concat(JSON.parse(localStorage.getItem(\"todoList\")));\n} //actions\n//set localstorage\n\n\nconst setLocalstorage = () => {\n  if (localStorage.getItem(\"todos\")) {\n    initialState.todos = initialState.todos.concat(JSON.parse(localStorage.getItem(\"todos\")));\n  }\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return { ...state,\n        todos: action.payload,\n        loading: false\n      };\n\n    case ADD_TODO:\n      alert('hello'); //Add to local storage\n\n      var stodos = [];\n\n      if (localStorage.getItem(\"todos\")) {\n        stodos = JSON.parse(localStorage.getItem(\"todos\"));\n      }\n\n      stodos.push({\n        id: '2',\n        price: '3',\n        title: '4'\n      });\n      localStorage.setItem(\"todos\", JSON.stringify(stodos));\n\n    case ERRORS:\n      return { ...state,\n        error: action.payload\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case CLEAR_ERRORS:\n      return { ...state,\n        errors: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/generous/projects/todo/src/reducers/TodoItemsReducer.js"],"names":["ADD_TODO","DELETE_TODO","ERRORS","UPDATE_TODO","GET_TODOS","GET_TODO","SET_LOADING","CLEAR_ERRORS","initialState","todos","current","loading","error","localStorage","getItem","concat","JSON","parse","todoList","setLocalstorage","state","action","type","payload","alert","stodos","push","id","price","title","setItem","stringify","errors"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,YARF,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB,C,CAOA;AACI;;AACA,IAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjCN,EAAAA,YAAY,CAACC,KAAb,GAAqBD,YAAY,CAACC,KAAb,CAAmBM,MAAnB,CACjBC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CADiB,CAArB;AAGH,C,CAED;AACA;;;AACA,IAAID,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAJ,EAAsC;AAClCN,EAAAA,YAAY,CAACU,QAAb,GAAwBV,YAAY,CAACU,QAAb,CAAsBH,MAAtB,CACpBC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADoB,CAAxB;AAGH,C,CAED;AACA;;;AACA,MAAMK,eAAe,GAAG,MAAM;AAC1B,MAAIN,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AAC/BN,IAAAA,YAAY,CAACC,KAAb,GAAqBD,YAAY,CAACC,KAAb,CAAmBM,MAAnB,CACjBC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CADiB,CAArB;AAGH;AACJ,CAND;;AAaF,gBAAe,CAACM,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,SAAL;AACE,aAAM,EACJ,GAAGgB,KADC;AAEJX,QAAAA,KAAK,EAAEY,MAAM,CAACE,OAFV;AAGJZ,QAAAA,OAAO,EAAE;AAHL,OAAN;;AAKF,SAAKX,QAAL;AACEwB,MAAAA,KAAK,CAAC,OAAD,CAAL,CADF,CAEE;;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAIZ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AAC/BW,QAAAA,MAAM,GAAGT,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAT;AACH;;AACDW,MAAAA,MAAM,CAACC,IAAP,CAAY;AACRC,QAAAA,EAAE,EAAE,GADI;AAERC,QAAAA,KAAK,EAAE,GAFC;AAGRC,QAAAA,KAAK,EAAE;AAHC,OAAZ;AAKAhB,MAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAeN,MAAf,CAA9B;;AAEF,SAAKvB,MAAL;AACE,aAAM,EACJ,GAAGkB,KADC;AAEJR,QAAAA,KAAK,EAACS,MAAM,CAACE;AAFT,OAAN;;AAIF,SAAKjB,WAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELT,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKJ,YAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELY,QAAAA,MAAM,EAAE;AAFH,OAAP;;AAKF;AACE,aAAOZ,KAAP;AAtCJ;AAwCD,CAzCD","sourcesContent":["import {\n  ADD_TODO,\n  DELETE_TODO,\n  ERRORS,\n  UPDATE_TODO,\n  GET_TODOS,\n  GET_TODO,\n  SET_LOADING,\n  CLEAR_ERRORS,\n} from \"../actions/types\";\n\nconst initialState = {\n  todos: null,\n  current: null,\n  loading: false,\n  error: null,\n};\n\n//if there is a todos object in localstorage\n    //use data in it and fill todos\n    if (localStorage.getItem(\"todos\")) {\n      initialState.todos = initialState.todos.concat(\n          JSON.parse(localStorage.getItem(\"todos\"))\n      );\n  }\n\n  //if there is a todoList object in localstorage\n  //use data in it and fill todoList list\n  if (localStorage.getItem(\"todoList\")) {\n      initialState.todoList = initialState.todoList.concat(\n          JSON.parse(localStorage.getItem(\"todoList\"))\n      );\n  }\n\n  //actions\n  //set localstorage\n  const setLocalstorage = () => {\n      if (localStorage.getItem(\"todos\")) {\n          initialState.todos = initialState.todos.concat(\n              JSON.parse(localStorage.getItem(\"todos\"))\n          );\n      }\n  };\n\n\n\n\n\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return{\n        ...state,\n        todos: action.payload,\n        loading: false\n      }\n    case ADD_TODO:\n      alert('hello')\n      //Add to local storage\n      var stodos = [];\n      if (localStorage.getItem(\"todos\")) {\n          stodos = JSON.parse(localStorage.getItem(\"todos\"));\n      }\n      stodos.push({\n          id: '2',\n          price: '3',\n          title: '4',\n      });\n      localStorage.setItem(\"todos\", JSON.stringify(stodos));\n\n    case ERRORS:\n      return{\n        ...state,\n        error:action.payload\n      }\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case CLEAR_ERRORS:\n      return {\n        ...state,\n        errors: null,\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}